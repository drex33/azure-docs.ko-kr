### YamlMime:FAQ
metadata:
  title: Azure Static Web Apps 질문과 대답
  description: Azure Static Web Apps에 대한 질문과 대답을 찾습니다.
  keywords: azure static web apps, frequently asked questions
  author: craigshoemaker
  ms.topic: article
  ms.service: static-web-apps
  ms.date: 10/23/2021
  ms.author: cshoe
  ms.openlocfilehash: e4bab9b55051ecd6bbb35a99b0962132d8a5fd60
  ms.sourcegitcommit: 106f5c9fa5c6d3498dd1cfe63181a7ed4125ae6d
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 11/02/2021
  ms.locfileid: "131101291"
title: Azure Static Web Apps 질문과 대답
sections:
- name: 빌드 및 배포
  questions:
  - question: >
      Static Web Apps로 자동으로 빌드할 수 있는 프런트 엔드 프레임워크는 무엇인가요?
    answer: >
      Static Web Apps는 자동으로 빌드할 수 있습니다.


      * 다음과 같은 인기 있는 SPA(단일 페이지 애플리케이션)를 포함합니다. React, Vue.js, Angular, Blazor WebAssembly

      * 다음과 같은 일반적으로 사용되는 고정적인 사이트 생성기를 포함합니다. Next.js, Nuxt.js, Gatsby, Hugo, Jekyll, Eleventy


      자세한 내용은 [프런트 엔드 프레임워크 구성](front-end-frameworks.md)을 참조하세요.
  - question: >
      빌드 프로세스 중에는 어떻게 되나요?
    answer: >
      Azure Static Web Apps 빌드 엔진은 앱의 프런트 엔드 및 API를 빌드하는 [Oryx](https://github.com/microsoft/Oryx)에 의해 구동됩니다.


      앱이 빌드되면 Oryx는 빌드 단계를 검색하고 자동으로 실행합니다. 예를 들어 앱에서 Node.js를 사용하는 경우 npm 또는 Yarn을 사용하여 패키지를 설치합니다. 그런 다음 앱의 _package.json_ 파일에 제공된 `build` 또는 `build:azure` 스크립트를 실행합니다.
  - question: >
      빌드 프로세스를 사용자 지정할 수 있나요?
    answer: >
      앱을 빌드하는 방법을 완전히 컨트롤하려면 앱의 GitHub 워크플로 또는 Azure DevOps 파이프라인에서 고유한 빌드 단계를 구성할 수 있습니다. 그런 다음 Static Web Apps GitHub Action 또는 Azure Pipelines 작업을 사용하여 앱을 배포할 수 있습니다. `skip_app_build`을 `true`로 설정했는지 확인합니다. 자세한 내용은 [빌드 구성](build-configuration.md?skip-building-front-end-app)을 참조하세요.


      `skip_app_build` 명령은 현재 프런트 엔드 앱에서만 지원됩니다. API 앱은 Azure Static Web Apps GitHub Action 또는 Azure Pipelines 작업으로 빌드해야 합니다.
  - question: >
      GitHub Actions 또는 Azure DevOps을 사용하지 않고 앱을 배포할 수 있나요?
    answer: >
      현재 Azure Static Web Apps는 GitHub Actions 및 Azure DevOps를 지원합니다. 나중에 더 많은 배포 옵션이 추가될 예정입니다.
  - question: "\"process.env.CI = true이므로 경고를 오류로 처리\"라는 메시지와 함께 React 애플리케이션이 빌드되지 않습니다. 이 오류를 어떻게 해결할까요?\n"
    answer: >
      앱에서 [react-앱-만들기](https://github.com/facebook/create-react-app)를 사용하는 경우 빌드 명령은 GitHub Actions 또는 Azure Pipelines와 같은 CI(연속 통합) 환경에서 실행할 때 경고를 오류로 처리합니다. 앱에 경고가 있으면 빌드에 실패합니다. 이러한 문제를 해결하려면 앱을 수정하여 경고를 제거합니다. 경고가 있더라도 빌드가 성공하도록 하려면 _package.json_ 에서 빌드 스크립트를 업데이트하여 `CI` 환경 변수를 설정 해제합니다.


      ```json

      "scripts": {
        "build": "CI= react-scripts build"
      }

      ```
  - question: >
      GitHub 분기를 어떻게 변경할까요?
    answer: >
      빌드 및 배포할 분기를 변경하려면 앱의 GitHub 워크플로에서 분기 이름을 업데이트합니다. 예를 들어 `release`라는 분기에서 빌드 및 배포하도록 앱을 변경하려면 워크플로의 `on` 섹션을 업데이트합니다.


      ```yaml

      on:
        push:
          branches:
            - release
        pull_request:
          types: [opened, synchronize, reopened, closed]
          branches:
            - release
      ```


      미리 보기 기간 동안 만들어진 고정적인 웹앱의 경우 [배포 토큰을 다시 설정](deployment-token-management.md)해야 할 수 있습니다.
  - question: >
      Linux GitHub Actions 또는 Azure Pipelines 빌드 에이전트에서 Static Web Apps 동작/작업을 실행해야 합니까?
    answer: >
      Azure Static Web Apps 빌드 엔진은 Linux Docker 컨테이너에서 실행되므로 Linux 빌드 에이전트에서만 실행할 수 있습니다.
  - question: >
      Git LFS(Large File Storage)를 사용하는 앱을 어떻게 배포할까요?
    answer: >
      GitHub 워크플로에서 `actions/checkout` LFS를 사용하도록 작업을 구성합니다.


      ```yaml

      - uses: actions/checkout@v2
        with:
          submodules: true
          lfs: true
      ```
  - question: >
      배포 후 캐시를 수동으로 제거하거나 무효화해야 합니까?
    answer: >
      Azure Static Web Apps은 캐시 무효화를 자동으로 처리합니다. 배포가 완료되면 모든 요청이 최신 버전의 파일로 제공됩니다. 그러나 파일을 구성한 경우에도 사용자의 브라우저 또는 CDN에서 파일을 캐시할 수 있습니다. 브라우저 및 CDN이 콘텐츠를 캐시하는 방법을 컨트롤하려면 앱의 [구성 파일](configuration.md)에서 적절한 헤더를 구성합니다.
  - question: >
      Azure Pipelines를 사용하여 배포하는 경우 사전 프로덕션 환경을 사용할 수 있나요?
    answer: >
      현재 GitHub Actions에 대해서만 [사전 프로덕션 환경](review-publish-pull-requests.md)을 지원합니다.
- name: Hosting
  questions:
  - question: >
      Static Web Apps은 사용자 지정 도메인 및 TLS 인증서를 지원하나요?
    answer: >
      apex 도메인을 포함하여 사용자 지정 도메인을 사용하도록 앱을 구성할 수 있습니다. Static Web Apps는 사용자 지정 도메인을 추가할 때 무료 TLS 인증서를 자동으로 제공합니다. 자세한 내용은 [무료 인증서를 사용하여 사용자 지정 도메인 설정](custom-domain.md)을 참조하세요.
  - question: >
      내 앱의 404 오류 페이지를 사용자 지정할 수 있나요?
    answer: >
      [구성 파일](configuration.md#response-overrides)의 `responseOverrides` 섹션을 사용하여 사용자 지정 오류 페이지를 구성할 수 있습니다.
  - question: >
      내 앱이 특정 Azure 지역에 배포되었는지 어떻게 확인할까요?
    answer: >
      Azure Static Web Apps은 글로벌 서비스입니다. 앱의 고정적인 자산은 전체적으로 분산됩니다. 앱을 만들 때 관리되는 Azure Functions 앱이 배포되는 지역을 선택합니다. 관리되는 함수를 지원하지 않는 지역에 Functions 앱이 필요한 경우 별도로 배포하는 Functions 앱과 함께 [Bring Your Own Functions 앱](functions-bring-your-own.md) 기능을 사용할 수 있습니다.
  - question: >
      Azure Application Gateway 또는 Azure Front Door 같은 CDN 뒤에서 어떻게 고정적인 웹앱을 구성할까요?
    answer: >
      Azure Static Web Apps는 앱의 고정적인 자산에 대한 전체 배포가 포함됩니다. 전체 공간을 최대화하거나 고급 기능이 필요한 경우 전용 콘텐츠 배포 네트워크(CDN) 또는 Azure Application Gateway를 추가할 수 있습니다.


      트래픽을 특정 CDN에 제한하려면 모든 요청에 미리 정의된 비밀 값이 포함된 헤더를 추가하도록 CDN 구성하고 [헤더를 요구](configuration.md#required-headers)하도록 Static Web Apps를 구성합니다. 트래픽을 Azure Application Gateway에 제한하려면 Application Gateway IP의 트래픽만 허용하도록 [앱을 구성](configuration.md#networking)합니다.


      또한 CDN 또는 Application Gateway 호스트 이름을 [전달할 수 있도록](configuration.md#allowed-forwarded-hosts) 앱을 구성합니다.


      Azure Front Door를 구성하는 방법에 대한 자세한 내용은 [이 자습서](front-door-manual.md)를 참조하세요.
  - question: >
      Gzip 또는 Brotli 압축을 사용하도록 설정하려면 어떻게 할까요?
    answer: >
      `.html`, `.css` 및 `.js`와 같이 널리 사용되는 텍스트 형식의 파일 확장명을 가진 자산의 경우 클라이언트 지원 시 Azure Static Web Apps가 자동으로 고정적인 자산의 [Gzip](https://en.wikipedia.org/wiki/Gzip)- 또는 [Brotli](https://en.wikipedia.org/wiki/Brotli)-압축 버전을 지원합니다.


      다른 파일 형식의 경우 Static Web Apps가 `.br` 확장과 함께 Brotli-압축 버전의 파일을 포함할 수 있도록 합니다. 예를 들어 `app.wasm`라는 압축되지 않은 파일이 있는 경우 `app.wasm.br`라는 압축된 버전을 앱에 추가할 수 있습니다. 이 버전은 Brotli를 지원하는 클라이언트가 요청하는 경우 자동으로 제공됩니다 `app.wasm`.
  - question: >
      존재하는 경로에 액세스할 때 고정적인 웹앱이 404 오류를 반환하는 이유는 무엇인가요?
    answer: >
      React, Angular 또는 Blazor WebAssembly와 같은 대부분의 프런트 엔드 프레임워크는 클라이언트 쪽 라우팅을 사용하여 탐색을 처리합니다. 클라이언트 쪽 경로는 브라우저에서 실행되는 앱에만 알려져 있습니다. Static Web Apps의 클라이언트 쪽 경로를 요청하면 앱의 배포된 자산에 경로가 없기 때문에 404 오류가 반환됩니다. 이 문제를 해결하려면 앱의 [구성 파일](configuration.md#fallback-routes)에 대체 경로를 추가합니다.
- name: 구성
  questions:
  - question: >
      내 앱에 대한 환경 변수를 어떻게 구성할까요?
    answer: >
      앱에 대해 설정할 수 있는 다양한 형식의 환경 변수가 있습니다. 앱의 [빌드 구성](build-configuration.md#environment-variables)에서 앱의 프런트 엔드 빌드 프로세스에 영향을 주는 변수를 구성합니다. 앱의 API에서 사용되는 변수를 구성하려면 [애플리케이션 설정](application-settings.md)을 사용합니다. 자세한 내용은 [구성 개요](configuration-overview.md)를 참조하세요.
  - question: >
      Static Web Apps가 관리 ID를 지원하나요?
    answer: >
      Static Web Apps은 관리 ID를 지원하지만 Key Vault [인증 비밀을 검색](key-vault-secrets.md)하는 데만 사용됩니다.


      API에서 관리 ID 또는 Key Vault 참조가 필요한 경우 [Bring Your Own Functions 앱](functions-bring-your-own.md) 기능을 사용하여 관리 ID를 사용하는 별도의 Functions 앱을 사용합니다.
- name: 인증
  questions:
  - question: >
      고정적인 웹앱에 로그인할 수 있는 사용자는 몇 명입니까?
    answer: Static Web Apps은 앱에 로그인할 수 있는 사용자 수에 제한이 없습니다. 기본 제공 초대 시스템을 사용하여 최대 25명의 사용자에게 사용자 지정 역할을 할당할 수 있습니다. 더 많은 사용자에게 사용자 지정 역할을 할당해야 하는 경우 [API 함수를 사용하여 프로그래매틱한 방식으로 역할을 할당](authentication-authorization.md?tabs=function#role-management)할 수 있습니다.
  - question: >
      ID 공급자에서 사용자의 액세스 토큰 또는 클레임 검색을 어떻게 사용하나요?
    answer: >
      [역할 관리에 API 함수](authentication-authorization.md?tabs=function#role-management)를 사용하는 경우 사용자의 액세스 토큰 및 클레임을 검색할 수 있습니다.
  - question: >
      단일 ID 공급자를 사용할 수 있나요?
    answer: >
      Static Web Apps 기본 제공 인증을 사용하는 경우 사용자는 지원되는 ID 공급자로 로그인할 수 있습니다. 사용자가 특정 ID 공급자가 로그인하지 못하도록 하려면 [블록](authentication-authorization.md?#block-an-authorization-provider)할 수 있습니다.


      [사용자 지정 인증](authentication-custom.md)을 사용하는 경우 하나 이상의 ID 공급자를 구성할 수 있습니다.
- name: API 함수
  questions:
  - question: >
      Static Web Apps가 지원하지 않는 언어 또는 언어 버전을 사용하여 API를 어떻게 쓸까요?
    answer: >
      Static Web Apps의 관리되는 함수 앱은 Azure Functions가 지원하는 모든 언어 또는 언어 버전을 지원하지 않습니다. [Bring Your Own Functions 앱](functions-bring-your-own.md) 기능을 사용하여 별도의 Functions 앱을 Static Web App에 연결할 수 있습니다.
  - question: >
      HTTP 이외의 이벤트에 응답하는 서버리스 함수를 어떻게 만들까요?
    answer: >
      Static Web Apps의 관리되는 함수 앱은 API 시나리오에 최적화되어 있으며 HTTP 트리거만 지원합니다. cron 작업 또는 상태 저장 워크플로에 대한 Durable Functions 등 Azure Functions가 지원하는 다른 트리거 형식을 사용해야 하는 경우 [Bring Your Own Functions 앱](functions-bring-your-own.md) 기능을 사용하여 별도의 Functions 앱을 Static Web App에 연결할 수 있습니다.
- name: 일반
  questions:
  - question: >
      무료 플랜의 제한은 무엇인가요?
    answer: >
      무료 플랜에는 전체 배포, 사용자 지정 도메인, 무료 TLS 인증서, 관리되는 API 함수 등 표준 계획과 동일한 많은 기능이 포함되어 있습니다. 그러나 더 많은 대역폭, SLA(서비스 수준 계약) 또는 고급 기능이 필요한 경우 표준 플랜을 고려해야 합니다. 자세한 내용은 [호스팅 계획](plans.md) 및 [할당량](quotas.md)을 참조하세요.
  - question: >
      앱을 만든 후 호스팅 계획을 변경할 수 있나요?
    answer: >
      언제든지 무료 플랜에서 표준 플랜으로 업그레이드할 수 있습니다. 표준 플랜이 필요한 기능을 사용하지 않는 경우 표준 플랜에서 무료 플랜으로 다운그레이드할 수도 있습니다.
  - question: >
      고정적인 웹앱을 배포하지 않고 로컬로 개발할 수 있나요?
    answer: >
      대부분의 프런트 엔드 프레임워크는 앱을 로컬로 실행하기 위한 개발 서버를 제공합니다. 그러나 인증 또는 API 함수를 사용하려는 경우 Azure에 배포하지 않고 앱의 모든 기능을 테스트하기 어려울 수 있습니다. 앱을 로컬로 실행하려면 인증을 포함하여 클라우드 환경을 에뮬레이트하고 [Azure Functions Core Tools](https://www.npmjs.com/package/azure-functions-core-tools)를 통합하는 [Static Web Apps CLI(명령줄 인터페이스)](https://www.npmjs.com/package/@azure/static-web-apps-cli)를 사용하여 API 함수를 실행할 수 있습니다. Azure에 앱을 배포하는 데 사용할 수 있는 [Static Web Apps Visual Studio Code 확장](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps)도 있습니다.
  - question: >
      도움말을 보거나 새 기능을 제안하기 위해 어떻게 해야 합니까?
    answer: >-
      도움이 필요하거나 제안이 있는 경우 [Static Web Apps GitHub 리포지토리](https://github.com/Azure/static-web-apps/issues)에서 이슈를 만들 수 있습니다.


      문제에 대한 즉각적인 도움말은 [Azure 지원에 문의](https://azure.microsoft.com/support/options/)하세요.
